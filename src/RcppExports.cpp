// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace Eigen;

// RSAVS_LargeN_Rcpp
Rcpp::List RSAVS_LargeN_Rcpp(const MatrixXd x_mat, const VectorXd y_vec, const int n, const int p, const char loss_type, const VectorXd loss_param, const char p1_type, VectorXd p1_param, const char p2_type, VectorXd p2_param, const VectorXd lam1_vec, const VectorXd lam2_vec, const double r1, const double r2, const double r3, const double phi, const double tol, const double max_iter);
RcppExport SEXP _RSAVS_RSAVS_LargeN_Rcpp(SEXP x_matSEXP, SEXP y_vecSEXP, SEXP nSEXP, SEXP pSEXP, SEXP loss_typeSEXP, SEXP loss_paramSEXP, SEXP p1_typeSEXP, SEXP p1_paramSEXP, SEXP p2_typeSEXP, SEXP p2_paramSEXP, SEXP lam1_vecSEXP, SEXP lam2_vecSEXP, SEXP r1SEXP, SEXP r2SEXP, SEXP r3SEXP, SEXP phiSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd >::type x_mat(x_matSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type y_vec(y_vecSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const char >::type loss_type(loss_typeSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type loss_param(loss_paramSEXP);
    Rcpp::traits::input_parameter< const char >::type p1_type(p1_typeSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type p1_param(p1_paramSEXP);
    Rcpp::traits::input_parameter< const char >::type p2_type(p2_typeSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type p2_param(p2_paramSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type lam1_vec(lam1_vecSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type lam2_vec(lam2_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< const double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< const double >::type r3(r3SEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(RSAVS_LargeN_Rcpp(x_mat, y_vec, n, p, loss_type, loss_param, p1_type, p1_param, p2_type, p2_param, lam1_vec, lam2_vec, r1, r2, r3, phi, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// RSAVS_LargeN_L2_Rcpp
Rcpp::List RSAVS_LargeN_L2_Rcpp(const MatrixXd x_mat, const VectorXd y_vec, const int n, const int p, const char p1_type, VectorXd p1_param, const char p2_type, VectorXd p2_param, const VectorXd lam1_vec, const VectorXd lam2_vec, const double r2, const double r3, const double phi, const double tol, const double max_iter);
RcppExport SEXP _RSAVS_RSAVS_LargeN_L2_Rcpp(SEXP x_matSEXP, SEXP y_vecSEXP, SEXP nSEXP, SEXP pSEXP, SEXP p1_typeSEXP, SEXP p1_paramSEXP, SEXP p2_typeSEXP, SEXP p2_paramSEXP, SEXP lam1_vecSEXP, SEXP lam2_vecSEXP, SEXP r2SEXP, SEXP r3SEXP, SEXP phiSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd >::type x_mat(x_matSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type y_vec(y_vecSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const char >::type p1_type(p1_typeSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type p1_param(p1_paramSEXP);
    Rcpp::traits::input_parameter< const char >::type p2_type(p2_typeSEXP);
    Rcpp::traits::input_parameter< VectorXd >::type p2_param(p2_paramSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type lam1_vec(lam1_vecSEXP);
    Rcpp::traits::input_parameter< const VectorXd >::type lam2_vec(lam2_vecSEXP);
    Rcpp::traits::input_parameter< const double >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< const double >::type r3(r3SEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const double >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(RSAVS_LargeN_L2_Rcpp(x_mat, y_vec, n, p, p1_type, p1_param, p2_type, p2_param, lam1_vec, lam2_vec, r2, r3, phi, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _RSAVS_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _RSAVS_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _RSAVS_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _RSAVS_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RSAVS_RSAVS_LargeN_Rcpp", (DL_FUNC) &_RSAVS_RSAVS_LargeN_Rcpp, 18},
    {"_RSAVS_RSAVS_LargeN_L2_Rcpp", (DL_FUNC) &_RSAVS_RSAVS_LargeN_L2_Rcpp, 15},
    {"_RSAVS_rcppeigen_hello_world", (DL_FUNC) &_RSAVS_rcppeigen_hello_world, 0},
    {"_RSAVS_rcppeigen_outerproduct", (DL_FUNC) &_RSAVS_rcppeigen_outerproduct, 1},
    {"_RSAVS_rcppeigen_innerproduct", (DL_FUNC) &_RSAVS_rcppeigen_innerproduct, 1},
    {"_RSAVS_rcppeigen_bothproducts", (DL_FUNC) &_RSAVS_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RSAVS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
